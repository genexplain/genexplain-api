apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-cli:commons-cli:1.3.1',
            'commons-io:commons-io:2.4',
            'ch.qos.logback:logback-classic:1.1.3',
            'org.apache.httpcomponents:httpclient:4.5.2',
            'io.github.lukehutch:fast-classpath-scanner:1.9.18',
            'org.apache.httpcomponents:httpmime:4.5.2',
            'commons-validator:commons-validator:1.5.1',
            'com.eclipsesource.minimal-json:minimal-json:0.9.4',
            'org.apache.commons:commons-lang3:3.5',
            'org.json:json:20160810'
    
    testCompile 'junit:junit:4.+'
    testCompile 'com.github.tomakehurst:wiremock-standalone:2.5.1'
}


task copyDependencies(type: Copy) {
    description = 'Copy depencies to libs folder, allowing build path inclusion in Eclipse'
    def libDir = new File(project.projectDir, '/libs')
    println libDir
    println 'Adding dependencies from compile configuration'
    configurations.compile.each { File file ->
        println 'Added ' + file
        copy {
            from file
            into libDir
        }
    }
}

task copyJavaDoc(type: Copy, dependsOn: javadoc) {
    def sourceDir = new File(project.projectDir, '/build/docs/javadoc')
    def destDir   = new File(project.projectDir, '/javadoc')
    
    delete destDir
    
    from sourceDir 
    into destDir 
    include('**/*')
}


jacoco {
    //toolVersion = "0.7.6+"
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination file("${buildDir}/jacocoHtml")
        //xml.destination "${buildDir}/reports/jacoco/report.xml"
        //reportsDir = file("$buildDir/reports/jacoco")
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            // Don't unit test the examples
            // Omitting the external selector, because of at least one test failing only in the CI system. 
            fileTree(dir: it, exclude: ['**/com/genexplain/api/eg/**', '**/com/genexplain/api/pipe/ExternalSelector**'])
        }))
    }
}

jar {
    baseName = 'genexplain-api'
    version =  '1.0'
    
    manifest {
        attributes 'Implementation-Title': 'genexplain-api',
                   'Implementation-Version': version,
                   'Main-Class': 'com.genexplain.api.app.APIRunner'
    }
    
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}


test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
    }
    finalizedBy jacocoTestReport 
    dependsOn "cleanTest"
    
}

compileTestJava {
    options.encoding = 'UTF-8'
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '2.10'
//}

/*
uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
*/
